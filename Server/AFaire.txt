Authentification de Point De vente soit Création de nouveau backend soit integration dans le même USERTABLE
authentification PDV et getAddTickets 

PUT PDV
    #Mbola ts nokitihana
    # def put(self, request, *args, **kwargs):
    #     print("DATAS", *args)
    #     datas = args[0]
    #     for key, value in datas.items():
    #         request.data[key] = str(value)
    #         print(key) 
    #     list_event = request.data.get('list_event')
    #     print("request", request.data.get('lieu'))
    #     serializer = self.get_serializer(data=request.data)
    #     serializer.is_valid(raise_exception=True)

    #     listEventInstance = []
    #     for event in list_event:
    #         eventinst = Evenement.objects.filter(nom__iexact = event).first()
    #         listEventInstance.append(eventinst)
    #         if not eventinst:
    #             return Response({f"L'evenement {event} n'existe pas"})
    #     try :
    #         if PointDeVente.objects.filter(username__iexact = nom_pdv, owner__exact = request.user):
    #             #cas de même organisateur sur même pdv
    #             return Response({"le point de vente est invalide ou existe deja"})
    #         elif not PointDeVente.objects.filter(username__iexact = nom_pdv):
    #             #username field existe dans la base => NOT
    #             #cas d'un autre organisateur et pdv n'est pas encore dans la base
    #             print("Passage a la creation")
    #             self.perform_create(serializer)   
    #     except Exception as e:
    #         return Response({"error" : "Une erreur s'est produit"})
    #     # Cas de pdv deja en base
    #     # currentpdv = PointDeVente.objects.filter(username__iexact = nom_pdv, owner__exact = request.user).first()
    #     currentpdv = serializer.instance
    #     print("ListEvenetInst", listEventInstance)
    #     print("CurrentPDV", currentpdv)

    #     for event in listEventInstance:
    #         print("ListEvenetInst", event)
    #         print("CurrentPDV", currentpdv)
    #         try:
    #             if event and currentpdv:
    #                 PointDeVenteToEvenement.objects.create(event = event, pdv = currentpdv)
    #                 #recuperation du ticket de reffernce
    #                 ticket = Ticket.objects.filter(event__exact = event, owner__exact = request.user).first()
    #                 print("Le ticket de ref", ticket)
    #                 AddTicket.objects.create(
    #                     type_ticket = ticket.type_ticket,
    #                     nb_ticket = 0,
    #                     event = ticket.event,
    #                     owner = ticket.owner,
    #                     pointdevente = currentpdv)
    #                 print('create PDVToEvent')
    #             else :
    #                 return Response({f"L'evenement {event} n'existe pas ou le pdv n'est pas specifié"})
    #         except Exception as e:
    #             return Response({f"erreur sur les données {e} "}, status=400)
    #     headers = self.get_success_headers(serializer.data)
    #     return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)